// Generated by gencpp from file camera/messageResponse.msg
// DO NOT EDIT!


#ifndef CAMERA_MESSAGE_MESSAGERESPONSE_H
#define CAMERA_MESSAGE_MESSAGERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace camera
{
template <class ContainerAllocator>
struct messageResponse_
{
  typedef messageResponse_<ContainerAllocator> Type;

  messageResponse_()
    : x_p(0.0)
    , y_q(0.0)
    , depth(0.0)  {
    }
  messageResponse_(const ContainerAllocator& _alloc)
    : x_p(0.0)
    , y_q(0.0)
    , depth(0.0)  {
  (void)_alloc;
    }



   typedef double _x_p_type;
  _x_p_type x_p;

   typedef double _y_q_type;
  _y_q_type y_q;

   typedef double _depth_type;
  _depth_type depth;





  typedef boost::shared_ptr< ::camera::messageResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera::messageResponse_<ContainerAllocator> const> ConstPtr;

}; // struct messageResponse_

typedef ::camera::messageResponse_<std::allocator<void> > messageResponse;

typedef boost::shared_ptr< ::camera::messageResponse > messageResponsePtr;
typedef boost::shared_ptr< ::camera::messageResponse const> messageResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera::messageResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera::messageResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::camera::messageResponse_<ContainerAllocator1> & lhs, const ::camera::messageResponse_<ContainerAllocator2> & rhs)
{
  return lhs.x_p == rhs.x_p &&
    lhs.y_q == rhs.y_q &&
    lhs.depth == rhs.depth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::camera::messageResponse_<ContainerAllocator1> & lhs, const ::camera::messageResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace camera

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::camera::messageResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera::messageResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera::messageResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera::messageResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera::messageResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera::messageResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera::messageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a9efcb4d91788a37410c13642a952590";
  }

  static const char* value(const ::camera::messageResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa9efcb4d91788a37ULL;
  static const uint64_t static_value2 = 0x410c13642a952590ULL;
};

template<class ContainerAllocator>
struct DataType< ::camera::messageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera/messageResponse";
  }

  static const char* value(const ::camera::messageResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera::messageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 服务器响应发送的数据\n"
"float64 x_p\n"
"float64 y_q\n"
"float64 depth\n"
"\n"
;
  }

  static const char* value(const ::camera::messageResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera::messageResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_p);
      stream.next(m.y_q);
      stream.next(m.depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct messageResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera::messageResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera::messageResponse_<ContainerAllocator>& v)
  {
    s << indent << "x_p: ";
    Printer<double>::stream(s, indent + "  ", v.x_p);
    s << indent << "y_q: ";
    Printer<double>::stream(s, indent + "  ", v.y_q);
    s << indent << "depth: ";
    Printer<double>::stream(s, indent + "  ", v.depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_MESSAGE_MESSAGERESPONSE_H
